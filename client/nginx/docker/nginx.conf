#user www-data;
rtmp_auto_push on;
user root;  #配置运行 nginx 服务器用户
worker_processes auto;  #配置允许生成的 worker process 数 核心数查看: grep ^proces /proc/cpuinfo | wc -l
pid /run/nginx.pid; #配置 nginx 进程 PID 存放路径
worker_rlimit_nofile 65535; #一个 nginx 进程打开的最多文件描述符数目，理论值应该是最多打开文件数（系统的值 ulimit -n）与 nginx 进程数相除，但是 nginx 分配请求并不均匀，所以建议与 ulimit -n 的值保持一致。
#工作模式与连接数上限
events {
    use epoll;  #参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll 模型是 Linux 2.6 以上版本内核中的高性能网络 I/O 模型，如果跑在 FreeBSD 上面，就用 kqueue 模型。
                  #epoll 是多路复用 IO(I/O Multiplexing) 中的一种方式，但是仅用于 linux2.6 以上内核，可以大大提高 nginx 的性能
    worker_connections 65535;   #配置最大连接数
}
http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;
    server {
        listen       81;
        server_name  localhost;
        location ^~ /live/ {
            types {
                application/vnd.apple.mpegurl m3u8;
                video/mp2t ts;
            }
            alias "/data/"; #视频流文件目录,跟上面的hls_path保持一致
            add_header Cache-Control no-cache;
            add_header Access-Control-Allow-Origin *;
        }
    }
}
rtmp {
   server {
      listen 1935;
      listen [::]:1935 ipv6only=on;
      chunk_size 4000; #上传flv文件块儿的大小

      application ^~ /live/ {
            live on;
            hls on;
            hls_path "/data/"; #视频流文件目录
            hls_fragment 1s; #没有生效
            hls_playlist_length 30s;
            hls_nested on; #默认是off。打开后的作用是每条流自己有一个文件夹
            hls_cleanup off; #不清理ts
       }
    }
}